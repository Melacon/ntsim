module network-topology-simulator {
    namespace "urn:onf:params:xml:ns:yang:network-topology-simulator";
    prefix network-topology-simulator;



    organization "Melacon";
    contact "Web: <https://github.com/Melacon>
             Editors:  Alex Stancu
                       <mailto:stancu.liviualex@gmail.com>";                       

    description "This module contains a collection of YANG definitions for managing the Network Topology Simulator.";

    revision 2019-03-07 {
        description "Initial version";        
    }

    revision 2019-06-07 {
        description "Modify controller details.";        
    }

    revision 2019-10-25 {
    	description "Modify notifications. Add VES message configuration options.";        
    }

    typedef operational-state-type {
        description "The operation state of the simulated device.";
        type enumeration {
            enum not-specified {
                description "none";
            }
            enum running {
                description "none";
            }
            enum created {
                description "none";
            }
            enum exited {
                description "none";
            }
        }
    }

    typedef authentication-method-type {
        description "The authentication method for VES messaging.";
        type enumeration {
            enum no-auth {
                description "no security (http)";
            }
            enum cert-only {
                description "auth by certificate (https)";
            }
            enum basic-auth {
                description "auth by basic auth username and password (https)";
            }
            enum cert-basic-auth {
                description "auth by certificate and basic auth username / password (https)";
            }
        }
    }

    typedef percent {
         type decimal64 {
            fraction-digits 2;
            range "0 .. 100";
         }
         description "Percentage";
     }

    grouping controller-details-type-g {

        leaf controller-ip {
            type string;
            description "The IP Address of the SDN Controller.";
        }

        leaf controller-port {
            type uint32;
            description "The Port of the SDN Controller.";
        }

        leaf controller-username {
            type string;
            description "The Username of the SDN Controller.";
        }

        leaf controller-password {
            type string;
            description "The Password of the SDN Controller.";
        }
        description "none";
    }

    grouping simulated-devices-type-g {
        leaf uuid {
            type string;
            description "The UUID of the simulated device.";
        }

        leaf device-ip {
            type string;
            description "The IP Address of the simulated device.";
        }

        leaf-list device-port {
            type uint32;
            description "A NETCONF endpoint (port) of the simulated device.";
        }

        leaf is-mounted {
            type boolean;
            description "Specifies if the simulated device is mounted in the SDN Controller.";
        }

        leaf operational-state {
            type operational-state-type;
            description "Specifies the operational state of the simulated device.";
        }

        description "none";
    }

    container simulator-config {
        description "Configuration container of the simulator.";

        leaf simulated-devices {
            description "The number of devices to be simulated.";
            type uint32;
            default 0;
        }

        leaf mounted-devices {
            description "The number of devices to be mounted in ODL. The configured number should not exceed the number of mounted devices.";
            type uint32;
            default 0;
        }

        container notification-config {

	    	leaf fault-notification-delay-period {
	            description "Interval in seconds between two consecutive notifications. If the attribute is set to 0, nofitications are not generated.";
	            type uint32;
	            default 0;
	        }

	        leaf ves-heartbeat-period {
	            description "Interval in seconds between two VES heartbeat messages. If the attribute is set to 0, heartbeat messages are not generated.";
	            type uint32;
	            default 0;
	        }

	        leaf is-netconf-available {
	        	description "If set to 'true', NETCONF notifications will be generated.";
	            type boolean;
	            default true;
	        }

	        leaf is-ves-available {
	        	description "If set to 'true', VES messages will be generated.";
	            type boolean;
	            default true;
	        }
	    }

        container controller-details {
            uses controller-details-type-g;

            description "The connectivity details of the SDN Controller where we want to mount our simulated devices.";
        }

        container ves-endpoint-details {

        	leaf ves-endpoint-ipv4 {
	            type string;
	            description "The IPv4 Address of the VES Endpoint.";
	        }

	        leaf ves-endpoint-ipv6 {
	            type string;
	            description "The IPv6 Address of the VES Endpoint.";
	        }

	        leaf ves-endpoint-port {
	            type uint32;
	            description "The Port of the VES Endpoint.";
	        }

	        leaf ves-endpoint-auth-method {
	        	type authentication-method-type;
	        	description "The type of the authentication to be used with the VES Endpoint.";
	        	default no-auth;
	        }

	        leaf ves-endpoint-username {
	            type string;
	            description "The Username to be used to authenticate to the VES Endpoint.";
	            when "../ves-endpoint-auth-method = 'basic-auth' or ../ves-endpoint-auth-method = 'cert-basic-auth'";
	        }

	        leaf ves-endpoint-password {
	            type string;
	            description "The Password to be used to authenticate to the VES Endpoint.";
	            when "../ves-endpoint-auth-method = 'basic-auth' or ../ves-endpoint-auth-method = 'cert-basic-auth'";
	        }

	        leaf ves-endpoint-certificate {
	        	type string;
	            description "The Certificate to be used to authenticate to the VES Endpoint.";
	            when "../ves-endpoint-auth-method = 'cert-only' or ../ves-endpoint-auth-method = 'cert-basic-auth'";
	        }

	        description "none";
	    }
    }

    container simulator-status {
        description "State data container of the simulator.";
        config false;

        container simulation-usage-details {
            description "The details about the simulation, including resources consumed.";
            config false;

            leaf running-simulated-devices {
                description "The current number of running simulated devices.";
                type uint32;
            }

            leaf running-mounted-devices {
                description "The current number of running simulated devices that are mounted in ODL.";
                type uint32;
            }

            leaf base-netconf-port {
                description "The starting port number for the NETCONF connections exposed.";
                type uint32;
                default 30000;
            }

            leaf cpu-usage {
                type percent;
                description "Specifies the CPU load generated by this simulated device.";
            }

            leaf mem-usage {
                type uint32;
                description "Specifies the RAM in MB used by this simulated device.";
            }
        }

        list simulated-devices-list {
            key 'uuid';
            config false;

            uses simulated-devices-type-g;
            description "The list of the devices that are currently simulated.";
        }
    }

    rpc restart-simulation {
        description "Operation to restart all the simulated devices with the new configuration of the simulator.";
    }

    rpc add-key-pair-to-odl {
        description "Operation to add a key pair signed by the NTS to OpenDaylight, such that it can connect to devices using TLS.";
    }
}
